// (c) dsldesign, wasowski, tberger
plugins {
  id "java-library"
  id "org.xtext.xtend"
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
  implementation project (':dsldesign.iupac')
  implementation project (':deps-xtext')
	
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

sourceSets {
  main {
    java {
      srcDirs = ['src', 'src-gen', 'xtend-gen']
    }
    resources {
      srcDirs = ['src', 'src-gen']
    }
  }
  test {
    java.srcDir 'src/test/xtext-gen'
    xtendOutputDir = 'src/test/xtend-gen'
    resources.srcDir 'src/test/xtext-gen'
    compileClasspath += sourceSets.main.output  // ← Hinzufügen
    runtimeClasspath += sourceSets.main.output  // ← Hinzufügen
  }
}

jar {
  from('model') {
    into('model')
  }
  //from(sourceSets.main.allSource) {
  //  include '**/*.xtext'
  //}
  manifest {
    attributes 'Bundle-SymbolicName': project.name
  }
}

task generateXtextLanguage (type: JavaExec) {
  mainClass = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
  classpath = configurations.compileClasspath
  inputs.file "src/dsldesign/iupac/xtext/mydsl/GenerateMyDsl.mwe2"  // Changed
  inputs.file "src/dsldesign/iupac/xtext/mydsl/MyDsl.xtext"         // Changed
  outputs.dir "src-gen"
  args += "src/dsldesign/iupac/xtext/mydsl/GenerateMyDsl.mwe2"      // Changed
  args += "-p"
  args += "rootPath=/${rootProject.projectDir}"
}

compileJava.dependsOn (generateXtextLanguage)


tasks.named("compileJava") {
    source = files("src-gen", "xtend-gen", "src")
}

processResources.dependsOn (generateXtextLanguage)
generateXtext.dependsOn (generateXtextLanguage)

clean.dependsOn (cleanGenerateXtextLanguage)

afterEvaluate {
    tasks.findByName('generateTestXtext')?.enabled = false
    tasks.findByName('generateXtext')?.enabled = false
}

task parseIupac(type: JavaExec) {
    group = 'dsl'
    description = 'Parse an IUPAC file'
    mainClass = 'dsldesign.iupac.xtext.test.IupacParser'
    classpath = sourceSets.main.runtimeClasspath  // ← main statt test
    
    if (project.hasProperty('file')) {
        args = [project.property('file')]
    }
}
tasks.named('parseIupac') {
    dependsOn 'generateXtextLanguage', 'classes', ':dsldesign.iupac:jar'
}
